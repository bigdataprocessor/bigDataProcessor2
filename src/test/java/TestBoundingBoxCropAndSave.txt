import bdv.tools.boundingbox.BoundingBoxDialog;
import bdv.util.*;
import bdv.util.volatiles.SharedQueue;
import bdv.viewer.ViewerFrame;
import de.embl.cba.bdp2.CachedCellImageCreator;
import de.embl.cba.bdp2.boundingbox.BoundingBox;
import de.embl.cba.bdp2.boundingbox.CustomBoundingBoxDialog;
import de.embl.cba.bdp2.boundingbox.SetupBoundingBox;
import de.embl.cba.bdp2.fileinfosource.FileInfoConstants;
import de.embl.cba.bdp2.fileinfosource.FileInfoSource;
import de.embl.cba.bdp2.saving.SavingSettings;
import net.imglib2.Interval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealInterval;
import net.imglib2.cache.img.CachedCellImg;
import net.imglib2.img.ImgView;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.type.NativeType;
import net.imglib2.util.Intervals;
import net.imglib2.view.Views;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.concurrent.atomic.AtomicBoolean;

public class TestBoundingBoxCropAndSave {

    public static void main(String[] args)
    {

        final net.imagej.ImageJ ij = new net.imagej.ImageJ();
        final String directory = "src\\test\\resources\\tiff-nc2-nt2\\";
        final FileInfoSource fileInfoSource = new FileInfoSource(directory, FileInfoConstants.LOAD_CHANNELS_FROM_FOLDERS,".*","" );
        CachedCellImg myImg = new CachedCellImageCreator().create(fileInfoSource,null);

        final double[] min, max;
        final BoundingBox maxBB = SetupBoundingBox.estimateBoundingBox(myImg);
        min = maxBB.getMin().clone();
        max = maxBB.getMax().clone();

        for ( int d = 0; d < min.length; ++d )
        {
            if ( min[ d ] > max[ d ] )
                min[ d ] = max[ d ];

            if ( min[ d ] < maxBB.getMin()[ d ] )
                min[ d ] = maxBB.getMin()[ d ];

            if ( max[ d ] > maxBB.getMax()[ d ] )
                max[ d ] = maxBB.getMax()[ d ];
        }

        final BdvStackSource bdvStackSource = BdvFunctions.show(myImg,"stream", BdvOptions.options().axisOrder(AxisOrder.XYCZT));

        // TODO: Make this a new class --ashis
        final AtomicBoolean lock = new AtomicBoolean( false );
        SharedQueue loadingQueue = new SharedQueue( 10 );
        ViewerFrame frame = new ViewerFrame(bdvStackSource.getSources(),fileInfoSource.nT, loadingQueue);
        final int boxSetupId = 9999; // some non-existing setup id
        final RealInterval initialInterval = Intervals.createMinMaxReal( min[ 0 ], min[ 1 ], min[ 2 ], max[ 0 ], max[ 1 ], max[ 2 ] ); // the initially selected bounding box
        final RealInterval rangeInterval = Intervals.createMinMaxReal(
                maxBB.getMin()[ 0 ], maxBB.getMin()[ 1 ], maxBB.getMin()[ 2 ],
                maxBB.getMax()[ 0 ], maxBB.getMax()[ 1 ], maxBB.getMax()[ 2 ] ); // the range (bounding box of possible bounding boxes)

        final CustomBoundingBoxDialog boundingBoxDialogCopy =
                new CustomBoundingBoxDialog(
                        frame,
                        "bounding box",
                        bdvStackSource.getBdvHandle().getViewerPanel(),
                        bdvStackSource.getBdvHandle().getSetupAssignments(),
                        boxSetupId,
                        initialInterval,
                        rangeInterval,
                        null )
                {
                    @Override
                    public void createContent()
                    {
                        // button prints the bounding box realInterval
                        final JButton button = new JButton( "Crop" );
                        button.addActionListener( new AbstractAction()
                        {
                            private static final long serialVersionUID = 1L;
                            @Override
                            public void actionPerformed( final ActionEvent e )
                            {
                                setVisible( false );
                                //System.out.println( "bounding box:" + BoundingBoxTools.printInterval( boxRealRandomAccessible.getInterval() ) );

                                for ( int d = 0; d < min.length; ++ d )
                                {
                                    min[ d ] = (int)boxRealRandomAccessible.getInterval().realMin( d );
                                    max[ d ] = (int)boxRealRandomAccessible.getInterval().realMax( d );
                                }

                                lock.set( true );

                                try
                                {
                                    synchronized ( lock ) { lock.notifyAll(); }
                                }
                                catch (Exception e1) {}

                            }
                        } );

                        getContentPane().add( boxSelectionPanel, BorderLayout.NORTH );
                        getContentPane().add( button, BorderLayout.SOUTH );
                        pack();
                    }

                    private static final long serialVersionUID = 1L;
                };

        boundingBoxDialogCopy.setVisible( true );
        do
        {
            try
            {
                synchronized ( lock ) { lock.wait(); }
            }
            catch (Exception e) {}
        }
        while ( lock.get() == false );

        for ( int d = 0; d < min.length; ++ d ) {
            System.out.println("Cropping Dims "+d);
            System.out.println("Min "+min[d]);
            System.out.println("Max "+max[d]);
        }
        Bdv bdv = bdvStackSource.getBdvHandle();

        long[] minLong = {min[0],min[1],0,min[2],0};
        long[] maxLong = {max[0],max[1],myImg.dimension(2)-1,max[2],myImg.dimension(4)-1};
        RandomAccessibleInterval rai = Views.interval(myImg, minLong,maxLong);
        BdvFunctions.show(rai,"cropped", BdvOptions.options().axisOrder(AxisOrder.XYCZT).addTo( bdv ));
        bdvStackSource.removeFromBdv();
        // Crop
        System.out.println("Crop Dims");
        System.out.println(rai.dimension(0));
        System.out.println(rai.dimension(1));
        System.out.println(rai.dimension(2));
        System.out.println(rai.dimension(3));
        System.out.println(rai.dimension(4));

        SavingSettings savingSettings = new SavingSettings();
        NativeType type = fileInfoSource.getType();
        savingSettings.image = ImgView.wrap(rai, new CellImgFactory(type));
        // user selection from GUI
        savingSettings.bin = "2,2,2";
        savingSettings.saveVolume = true;
        savingSettings.saveProjection = true;
        savingSettings.convertTo8Bit = false;
        savingSettings.convertTo16Bit = true;
        //savingSettings.mapTo0 = Integer.parseInt(tfMapTo0.getText());
        //savingSettings.mapTo255 = Integer.parseInt(tfMapTo255.getText());

                /*
                // TODO: implement below for planes
                savingSettings.convertTo16Bit = cbConvertTo16Bit.isSelected();
                savingSettings.gate = cbGating.isSelected();
                savingSettings.gateMin = Integer.parseInt(tfGateMin.getText());
                savingSettings.gateMax = Integer.parseInt(tfGateMax.getText());
                */
        savingSettings.filePath = "src\\test\\resources\\imaris";
        savingSettings.parentDirectory = "src\\test\\resources\\imaris";
        savingSettings.fileType = SavingSettings.FileType.HDF5_IMARIS_BDV;
        savingSettings.compression = SavingSettings.NONE;
        savingSettings.rowsPerStrip = 10;
        savingSettings.fileBaseNameIMARIS = "Data";
        //SaveCentral.goSave(savingSettings,fileInfoSource);
        //savingSettings.filePath = "src\\test\\resources\\stacks";
        //SaveCentral.saveTIFFAsStacks(savingSettings,fileInfoSource);
    }



}
