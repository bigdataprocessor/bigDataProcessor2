package de.embl.cba.bdp2.viewers;

import de.embl.cba.bdp2.dialog.BdvMenus;
import de.embl.cba.bdp2.dialog.DisplaySettings;
import ij.CompositeImage;
import ij.ImagePlus;
import net.imglib2.FinalInterval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.display.imagej.ImageJFunctions;
import net.imglib2.realtransform.AffineTransform3D;
import net.imglib2.type.NativeType;
import net.imglib2.type.numeric.RealType;

import javax.swing.*;

public class IJ1ImageViewer<T extends RealType<T> & NativeType<T> > implementsBdvImageViewer {

    private ImagePlus imp;
    private RandomAccessibleInterval rai;

    public IJ1ImageViewer()
    {
    }

    @Override
    public void show() {
        imp.show();
    }

    @Override
    public FinalInterval get5DIntervalFromUser() {
        return null;
    }

    @Override
    public void setRai( RandomAccessibleInterval rai ) {
        this.rai = rai;
        imp = ImageJFunctions.wrap( rai, "" );
    }

    @Override
    public RandomAccessibleInterval getRai() {
        return rai;
    }

    @Override
    public void setImageName( String streamName) { imp.setTitle( streamName ); }

    @Override
    public String getImageName() {
        return imp.getTitle();
    }

    @Override
    public BdvImageViewer newImageViewer(RandomAccessibleInterval rai, String streamName) {
        return null;
    }

    @Override
    public void addMenus(BdvMenus menus) {

        final JFrame jFrame = new JFrame( "BigConverter" );
        final JMenuBar jMenuBar = new JMenuBar();

        for ( JMenu menu : menus.getMenus() )
        {
            jMenuBar.add( menu );
        }

        jFrame.setSize(450, 80);
        jFrame.setJMenuBar( jMenuBar );
        jFrame.setVisible(true);
    }

    @Override
    public void setDisplayRange(double min, double max, int channel) {
        imp.setDisplayRange( min, max, channel );
    }

    @Override
    public DisplaySettings getDisplaySettings(int channel) {
        imp.setC( channel + 1 );
        return new DisplaySettings( imp.getDisplayRangeMin(), imp.getDisplayRangeMax() ) ;
    }

    @Override
    public void replicateViewerContrast( BdvImageViewer newImageView) {

    }

    @Override
    public int getCurrentTimePoint() {
        return 0;
    }

    @Override
    public void repaint(AffineTransform3D viewerTransform) {

    }

    @Override
    public void replaceRai( RandomAccessibleInterval rai, String newStreamName) {

    }

    @Override
    public void shiftImageToCenter(double[] centerCoordinates) {

    }

}
